using System;
using System.Collections.Generic;
using System.Text;

namespace BlockchainParser.Tests
{
    internal class TestData
    {
        public static byte[] CoinbaseInput = new byte[]
{
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // outpoint TXID
                0xff, 0xff, 0xff, 0xff, // outpoint index
                0x29, // Bytes in coinbase script
                0x03, // Bytes in height
                0x4e, 0x01, 0x05, // Height
                0x06, 0x2f, 0x50, 0x32, 0x53, 0x48, 0x2f, 0x04, 0x72, 0xd3, 0x54, 0x54, 0x08, 0x5f, 0xff, 0xed, 0xf2, 0x40, 0x00, 0x00, 0xf9, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x26, 0x20, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x21, // Coinbase Script
                0x00, 0x00, 0x00, 0x00 // Sequence
};
        public static byte[] Output1 = new byte[]
        {
            0x2c, 0x37, 0x44, 0x95, 0x00, 0x00, 0x00, 0x00, // satoshis (25.04275756 BTC)
            0x19, 0x76, 0xa9, 0x14, 0xa0, 0x9b, 0xe8, 0x04, 0x0c, 0xbf, 0x39, 0x99, 0x26, 0xae, 0xb1, 0xf4, 0x70, 0xc3, 0x7d, 0x13, 0x41, 0xf3, 0xb4, 0x65, 0x88, 0xac, // P2PKH script
        };

        public static byte[] Transaction_Coinbase_Output1()
        {
            var list = new List<byte>();

            list.AddRange(new byte[] { 0x01, 0x00, 0x00, 0x00 }); // Transaction Version
            list.Add(0x01); // number of inputs
            list.AddRange(CoinbaseInput);
            list.Add(0x01); //Output Count
            list.AddRange(Output1);
            list.AddRange(new byte[] { 0x00, 0x00, 0x00, 0x00 });

            return list.ToArray();
        }

        public static byte[] Block_Transaction_Coinbase_Output1()
        {
            var list = new List<byte>();

            list.AddRange(new byte[] { 0x80, 0x00, 0x00, 0x00 }); // Header Length
            list.AddRange(new byte[] { 0x02, 0x00, 0x00, 0x00 }); // Block Version
            list.AddRange(new byte[] { 0xb6, 0xff, 0x0b, 0x1b, 0x16, 0x80, 0xa2, 0x86, 0x2a, 0x30, 0xca, 0x44, 0xd3, 0x46, 0xd9, 0xe8, 0x91, 0x0d, 0x33, 0x4b, 0xeb, 0x48, 0xca, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }); // Hash of previous block's header
            list.AddRange(new byte[] { 0x9d, 0x10, 0xaa, 0x52, 0xee, 0x94, 0x93, 0x86, 0xca, 0x93, 0x85, 0x69, 0x5f, 0x04, 0xed, 0xe2, 0x70, 0xdd, 0xa2, 0x08, 0x10, 0xde, 0xcd, 0x12, 0xbc, 0x9b, 0x04, 0x8a, 0xaa, 0xb3, 0x14, 0x71 }); // Merkle root
            list.AddRange(new byte[] { 0x24, 0xd9, 0x5a, 0x54 }); // Unix time
            list.AddRange(new byte[] { 0xff, 0xff, 0x00, 0x1d }); // Bits
            list.AddRange(new byte[] { 0x1d, 0xac, 0x2b, 0x7c }); // Nonce
            list.Add(0x01);
            list.AddRange(Transaction_Coinbase_Output1());

            return list.ToArray();
        }
    }
}
